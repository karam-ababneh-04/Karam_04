import pandas as pd
import numpy as np
from sklearn.cluster import KMeans
from sklearn.preprocessing import MinMaxScaler
import umap
import matplotlib.pyplot as plt
from sklearn.metrics import silhouette_score

# Load the dataset 
data = pd.read_csv('/kaggle/input/digit-clustering/data.csv')

# Drop the ID  
data = data.drop(columns=['ID'])

# Min-Max scaling
scaler = MinMaxScaler()
scaled_data = scaler.fit_transform(data)

#  UMAP  dimensionality reduction
umap_reducer = umap.UMAP(n_components=2, random_state=42)
umap_data = umap_reducer.fit_transform(scaled_data)

#   optimal number of clusters
max_clusters = 20
silhouette_scores = []
for n_clusters in range(2, max_clusters + 1):
    kmeans = KMeans(n_clusters=n_clusters, n_init=20, random_state=42)
    cluster_labels = kmeans.fit_predict(umap_data)
    silhouette_avg = silhouette_score(umap_data, cluster_labels)
    silhouette_scores.append(silhouette_avg)

k = 9

# Apply KMeans clustering with the optimal number of clusters
# KMeans Model
kmeans = KMeans(n_clusters=k, n_init=20, random_state=42) 
kmeans.fit(umap_data)
clusters = kmeans.predict(umap_data)

#  cluster labelss
data['Cluster'] = clusters

# Visualize  clusters
plt.figure(figsize=(10, 6))
for cluster in range(k):
    cluster_data = umap_data[data['Cluster'] == cluster]
    plt.scatter(cluster_data[:, 0], cluster_data[:, 1], label=f'Cluster {cluster}', alpha=0.5)

plt.title('UMAP Visualization of Clusters')
plt.xlabel('UMAP Dimension 1')
plt.ylabel('UMAP Dimension 2')
plt.legend()
plt.grid(True)
plt.show()

# Create a DataFrame with ID from the testing data and predicted labels
testing_data = pd.read_csv('/kaggle/input/digit-clustering/sample_submission.csv')
predictions_df = pd.DataFrame({'ID': testing_data['ID'], 'labels': clusters})

# Save the DataFrame to a CSV file
predictions_df.to_csv('predictions.csv', index=False)
predictions_df
